<?php

function profile2_field_custom_visibility_init() {
}


function profile2_field_custom_visibility_menu() {

  $items = array();

  // Create tabs for all possible bundles.
  $entity_info = entity_get_info("profile2");

  foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {

    if (isset($bundle_info['admin'])) {

      // Extract access information, providing defaults.
      $access = array_intersect_key($bundle_info['admin'], drupal_map_assoc(array(
        'access callback',
        'access arguments'
      ))) + array(
        'access callback' => 'user_access',
        'access arguments' => array('administer site configuration'),
      );

      // 'Manage display' tab.
      $items[$bundle_info['admin']['path'] . "/user-manage"] = array(
        'title' => 'Custom visibility',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
          'profile2_field_custom_visibility_bundle_config_form',
          $bundle_info['admin']['bundle argument']
        ),
        'type' => MENU_LOCAL_TASK,
        'weight' => 3,
      ) + $access;

    }
  }

  return $items;

}

/**
 * Callback form of $bundle_info['admin']['path'] . "/user-manage"
 * @param $form
 * @param $form_state
 * @param $bundle
 * @return array
 */
function profile2_field_custom_visibility_bundle_config_form($form, &$form_state, $bundle) {

  $bundle_name = field_extract_bundle("profile2", $bundle);
  $instances = field_info_instances("profile2", $bundle_name);

  $form += array(
    '#bundle' => $bundle,
  );

  $form['fields'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Profile2 one page'),
    '#description' => t('Select fields user can decide'),
    '#weight' => 0
  );

  foreach ($instances as $name => $instance) {

    $checked = isset($bundle->data['user_custom_visibility']) && in_array($name, $bundle->data['user_custom_visibility']);

    $form['fields'][$name] = array(
      '#type' => 'checkbox',
      '#title' => check_plain($instance['label']),
      '#default_value' => $checked,
    );

  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  return $form;
}

function profile2_field_custom_visibility_bundle_config_form_submit($form, &$form_state) {

  $marked = array_filter($form_state['values']['fields']);

  /** @var $bundle ProfileType */
  $bundle = & $form['#bundle'];
  $bundle->data["user_custom_visibility"] = array_keys($marked);
  $bundle->save();

}

/**
 * Implements hook_field_attach_view_alter()
 * @param $output
 * @param $context
 */
function profile2_field_custom_visibility_field_attach_view_alter(&$output, $context) {

  if ($context['entity_type'] == "profile2") {

    /** @var $profile Profile */
    $profile = $context['entity'];

    $user_lvl_perms = profile2_granular_field_visibility_get_fields_perms($profile->uid);

    foreach ($output as $field_name => $field_content) {
      if (is_field($field_content) && isset($user_lvl_perms[$field_name])) {
        //We have our own access settings on user level. we apply they here
        $output[$field_name]['#access'] = $user_lvl_perms[$field_name];
      }
    }
  }
}

/**
 * Alteramos los formularios de perfiles
 */
function profile2_field_custom_visibility_form_profile2_form_alter(&$form, &$form_state) {


  foreach ($form_state['profiles'] as $profile) {
    $name = field_extract_bundle("profile2", $profile->type);
    $bundle = profile2_get_types($name);
    $allowed_fields = isset($bundle->data['user_custom_visibility']) ? $bundle->data['user_custom_visibility'] : FALSE;

    $fcv = entity_load("profile2fcv", FALSE, array('uid' => $profile->uid, 'type' => $profile->type));
    $fcv = array_pop($fcv);

    foreach ($allowed_fields as $allowed_field) {

      $form["profile_" . $name][$allowed_field]["expose_" . $allowed_field] = array(
        '#type' => 'checkbox',
        '#title' => t("Expose this"),
        '#default_value' => in_array($allowed_field, $fcv->allowed),
        '#prefix' => '<div class="exponer-este-field">',
        '#suffix' => '</div>',
      );
    }

  }

  $form['#submit'][] = 'foo';
}


function foo(&$form, &$form_state) {

  /** @var $controller EntityAPIController */
  $controller = entity_get_controller("profile2fcv");

  foreach ($form_state['profiles'] as $profile) {
    $name = field_extract_bundle("profile2", $profile->type);
    $allow_these = array();

    if (isset($form_state['values']["profile_" . $name])) {
      foreach ($form_state['values']["profile_" . $name] as $field_name => $field_value) {
        if (isset($field_value["expose_" . $field_name]) && $field_value["expose_" . $field_name] === 1) {
          $allow_these[] = $field_name;
        }
      }
    }

    //el type "socio" si y el uid
    //compruebo si ya tenia almacenado algun profile2fcv para este perfil-usuario
    $fcv = $controller->load(FALSE, array('uid' => $profile->uid, 'type' => $profile->type));

    if (!$fcv) {
      $fcv = $controller->create(array(
        'uid' => $profile->uid,
        'type' => $profile->type,
        'allowed' => $allow_these
      ));
      $controller->save($fcv);
    }
    else {
      $fcv = array_pop($fcv);
      $fcv->allowed = $allow_these;
      $controller->save($fcv);
    }
    //ahora guargamos la referencia del perfil y los field que el usuario haya marcado para mostrar ($allow_these)
    //para luego usa esta informacion a la hora de mostrar la info.
  }


}

/**
 * Check if given element is a valid field.
 *
 * @param mixed $element
 * @return bool
 */
function is_field($element) {
  $is_array = is_array($element);
  $has_theme = $is_array && isset($element["#theme"]);
  $has_field_name = $is_array && isset($element["#field_name"]);
  $has_field_type = $is_array && isset($element["#field_type"]);
  return $has_field_name && $has_field_type && $has_theme;
}

/**
 * Returns access perms specified by user.
 *
 * @param $uid
 * @return array
 */
function profile2_granular_field_visibility_get_fields_perms($uid) {
  $perms = array(
    "field_foto" => TRUE,
    "field_nombre" => TRUE,
  );

  return $perms;
}

function profile2_field_custom_visibility_entity_info() {
  $return = array(
    'profile2fcv' => array(
      'label' => t('profile2 privacy fields'),
      'controller class' => 'EntityAPIController',
      'base table' => 'profile2_fcv',
      'entity keys' => array('id' => 'id'),
    ),

  );
  return $return;
}
